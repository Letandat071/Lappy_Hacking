import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import uuid
import winreg
from datetime import datetime
from ..utils.message_box import show_message

class AdvancedTab(ttk.Frame):
    def __init__(self, parent):
        super().__init__(parent, padding="20")
        self.parent = parent
        self.machine_guid_backup = None
        self.setup_ui()

    def setup_ui(self):
        # Create scrollable frame
        canvas = tk.Canvas(self)
        scrollbar = ttk.Scrollbar(self, orient="vertical", command=canvas.yview)
        
        # Main container with scrolling
        main_container = ttk.Frame(canvas)
        
        # Configure canvas
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack scrollbar and canvas
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Create window inside canvas
        canvas_frame = canvas.create_window((0, 0), window=main_container, anchor="nw")
        
        # Update canvas when frame size changes
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        main_container.bind('<Configure>', configure_scroll_region)
        
        # Update canvas window when canvas is resized
        def configure_canvas(event):
            canvas.itemconfig(canvas_frame, width=event.width)
        canvas.bind('<Configure>', configure_canvas)

        # Configure mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # Bind mouse enter/leave to activate/deactivate scrolling
        def _bind_mousewheel(event): canvas.bind_all("<MouseWheel>", _on_mousewheel)
        def _unbind_mousewheel(event): canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_mousewheel)
        canvas.bind('<Leave>', _unbind_mousewheel)

        # Content container with padding
        content_container = ttk.Frame(main_container, padding="20")
        content_container.pack(fill=tk.BOTH, expand=True)

        # Header section
        header_frame = ttk.Frame(content_container)
        header_frame.pack(fill=tk.X, pady=(0, 30))

        ttk.Label(header_frame, 
                 text="Advanced Tools", 
                 style="Header.TLabel").pack(side=tk.LEFT)

        # Log Section
        log_frame = ttk.LabelFrame(content_container, text="Operation Log", padding="5")
        log_frame.pack(fill=tk.X, pady=(0, 10))

        self.log_text = tk.Text(log_frame, height=6, wrap=tk.WORD)
        self.log_text.pack(fill=tk.X, padx=5, pady=5)

        # Machine GUID Management Section
        guid_frame = ttk.LabelFrame(content_container, text="Machine GUID Management", padding="5")
        guid_frame.pack(fill=tk.X, pady=(0, 25))

        # Current GUID display
        guid_display_frame = ttk.Frame(guid_frame)
        guid_display_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(guid_display_frame, text="Current MachineGuid:", 
                 style="Bold.TLabel").pack(side=tk.LEFT, padx=10)
        
        self.machine_guid_label = ttk.Label(guid_display_frame, text="", 
                                          style="ID.TLabel")
        self.machine_guid_label.pack(side=tk.LEFT, padx=10)

        # GUID Buttons frame
        guid_buttons_frame = ttk.Frame(guid_frame)
        guid_buttons_frame.pack(fill=tk.X, pady=10)

        # Backup button
        backup_btn = ttk.Button(guid_buttons_frame, 
                              text="üíæ Sao l∆∞u GUID",
                              command=self.backup_machine_guid,
                              style="Green.TButton",
                              width=20)
        backup_btn.pack(side=tk.LEFT, padx=10)

        # Change button
        change_btn = ttk.Button(guid_buttons_frame,
                              text="üîÑ Thay ƒë·ªïi GUID",
                              command=self.change_machine_guid,
                              style="Red.TButton",
                              width=20)
        change_btn.pack(side=tk.LEFT, padx=10)

        # Restore button
        restore_btn = ttk.Button(guid_buttons_frame,
                               text="‚èÆ Ph·ª•c h·ªìi GUID",
                               command=self.restore_machine_guid,
                               style="Blue.TButton",
                               width=20)
        restore_btn.pack(side=tk.LEFT, padx=10)

        # Update current GUID display
        self.update_current_guid()
        
        # Block Cursor Update Section
        block_update_frame = ttk.LabelFrame(content_container, text="Block Cursor Update", padding="15")
        block_update_frame.pack(fill=tk.X, pady=(0, 25))

        # Status display
        status_frame = ttk.Frame(block_update_frame)
        status_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(status_frame, text="Tr·∫°ng th√°i:", 
                 style="Bold.TLabel").pack(side=tk.LEFT, padx=10)
        
        self.block_status_label = ttk.Label(status_frame, text="ƒêang ki·ªÉm tra...", 
                                          style="Status.TLabel")
        self.block_status_label.pack(side=tk.LEFT, padx=10)

        # Block/Unblock buttons frame
        block_buttons_frame = ttk.Frame(block_update_frame)
        block_buttons_frame.pack(fill=tk.X, pady=10)

        # Block button
        block_btn = ttk.Button(block_buttons_frame, 
                             text="üö´ Ch·∫∑n Update",
                             command=self.block_cursor_update,
                             style="Green.TButton",
                             width=20)
        block_btn.pack(side=tk.LEFT, padx=10)

        # Unblock button
        unblock_btn = ttk.Button(block_buttons_frame,
                               text="‚úÖ G·ª° ch·∫∑n Update",
                               command=self.unblock_cursor_update,
                               style="Red.TButton",
                               width=20)
        unblock_btn.pack(side=tk.LEFT, padx=10)

        # Check initial block status
        self.check_block_status()
        
        # Guide Section
        guide_frame = ttk.LabelFrame(content_container, text="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng MachineGUID", padding="20")
        guide_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 25))
        
        # Ti√™u ƒë·ªÅ h∆∞·ªõng d·∫´n
        guide_title = ttk.Label(
            guide_frame,
            text="H∆∞·ªõng d·∫´n s·ª≠a l·ªói",
            style="Header.TLabel"
        )
        guide_title.pack(anchor=tk.W, pady=(5, 15))
        
        # C√°c l∆∞u √Ω quan tr·ªçng
        notes = [
            "‚ö†Ô∏è L∆∞u √Ω ƒë·∫£m b·∫£o ƒë√£ sao L∆∞u MachineGUID",
            "üìù Fix Cursor 0.45 tr·ªü l√™n",
            "‚ùó ƒê·∫£m b·∫£o ƒë√£ t·∫Øt Cursor"
        ]
        
        notes_frame = ttk.Frame(guide_frame)
        notes_frame.pack(fill=tk.X, padx=10)
        
        for note in notes:
            note_label = ttk.Label(
                notes_frame,
                text=note,
                style="Warning.TLabel"
            )
            note_label.pack(anchor=tk.W, pady=3)
        
        # C√°c b∆∞·ªõc th·ª±c hi·ªán
        steps = [
            "1. Thay ƒë·ªïi th√¥ng tin ID b·∫±ng c√°ch nh·∫•p v√†o n√∫t s·ª≠a l·ªói nhanh",
            "2. T·∫°i Thay ƒë·ªïi MachineGUID (Sao l∆∞u tr∆∞·ªõc khi ƒë·ªïi)",
            "3. M·ªü l·∫°i Cursor v√† Login b·∫±ng t√†i kho·∫£n m·ªõi", 
            "4. M·ªü chat l√™n v√† th·ª±c hi·ªán chat (ƒê·ªÉ IDE x√°c nh·∫≠n GUID)",
            "5. Quay l·∫°i Lappy Lab v√† kh√¥i ph·ª•c l·∫°i MachineGUID"
        ]
        
        steps_frame = ttk.Frame(guide_frame)
        steps_frame.pack(fill=tk.X, padx=10, pady=(15, 0))
        
        for step in steps:
            step_label = ttk.Label(
                steps_frame,
                text=step,
                style="Description.TLabel",
                wraplength=580
            )
            step_label.pack(anchor=tk.W, pady=5)
            
        # Th√™m Note m√†u cam
        note_frame = ttk.Frame(guide_frame)
        note_frame.pack(fill=tk.X, padx=10, pady=(15, 5))
        note_label = ttk.Label(
            note_frame,
            text="L∆∞u √Ω: MachineGuid ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho Cursor 0.45 tr·ªü l√™n v√¨ ƒë√¢y l√† ƒëo·∫°n m√£ r·∫•t nguy hi·ªÉm\nv√¨ n√≥ c√≥ th·ªÉ g√¢y ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng ƒë·∫øn x√°c minh c√°c ·ª©ng d·ª•ng \nv√† b·∫£n quy·ªÅn tr√™n m√°y t√≠nh c·ªßa b·∫°n, h√£y ƒë·∫£m b·∫£o ƒë√£ backup ƒëo·∫°n m√£ tr∆∞·ªõc khi th·ª±c hi·ªán",
            style="Warning.TLabel",
            wraplength=580
        )
        note_label.pack(anchor=tk.W)
        
        # Warning Section
        warning_frame = ttk.Frame(content_container)
        warning_frame.pack(fill=tk.X, pady=(0, 10))
        warning_text = ("‚ö†Ô∏è WARNING: These tools are for advanced users only.\n"
                       "Incorrect modifications can cause system instability.")
        ttk.Label(warning_frame, 
                 text=warning_text,
                 style="Warning.TLabel",
                 wraplength=600).pack(padx=10)

    def update_current_guid(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã GUID hi·ªán t·∫°i"""
        try:
            current_guid = self.get_machine_guid()
            self.machine_guid_label.config(text=current_guid)
        except Exception as e:
            self.machine_guid_label.config(text="Unable to read")
            self.log(f"Error reading current GUID: {str(e)}")

    def get_machine_guid(self):
        """ƒê·ªçc Machine GUID t·ª´ registry"""
        try:
            key_path = r"SOFTWARE\Microsoft\Cryptography"
            registry_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, 
                                        winreg.KEY_READ | winreg.KEY_WOW64_64KEY)
            value, regtype = winreg.QueryValueEx(registry_key, "MachineGuid")
            winreg.CloseKey(registry_key)
            return value
        except WindowsError as e:
            raise Exception(f"Kh√¥ng th·ªÉ ƒë·ªçc MachineGuid: {str(e)}")

    def set_machine_guid(self, new_guid):
        """C·∫≠p nh·∫≠t Machine GUID trong registry"""
        try:
            key_path = r"SOFTWARE\Microsoft\Cryptography"
            registry_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0,
                                        winreg.KEY_SET_VALUE | winreg.KEY_WOW64_64KEY)
            winreg.SetValueEx(registry_key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            winreg.CloseKey(registry_key)
        except WindowsError as e:
            raise Exception(f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t MachineGuid: {str(e)}")

    def backup_machine_guid(self):
        try:
            current_guid = self.get_machine_guid()
            self.machine_guid_backup = current_guid
            
            # L·∫•y ƒë∆∞·ªùng d·∫´n t·ª´ settings
            settings_manager = self.winfo_toplevel().settings_manager
            backup_path = settings_manager.get_setting("guid_backup_path")
            
            if not backup_path:
                backup_path = os.path.join(os.path.expanduser("~"), "machine_guid_backup.json")
            else:
                # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                os.makedirs(os.path.dirname(os.path.join(backup_path, "machine_guid_backup.json")), exist_ok=True)
                backup_path = os.path.join(backup_path, "machine_guid_backup.json")
            
            backup_data = {
                "guid": current_guid,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            with open(backup_path, 'w') as f:
                json.dump(backup_data, f, indent=4)
            
            message = f"""‚úÖ ƒê√£ sao l∆∞u MachineGUID th√†nh c√¥ng!

üìÇ File backup ƒë∆∞·ª£c l∆∞u t·∫°i:
{backup_path}

‚ö†Ô∏è L∆∞u √Ω: ƒê√¢y l√† file backup quan tr·ªçng, b·∫°n n√™n:
‚Ä¢ L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n n√†y
‚Ä¢ Kh√¥ng x√≥a file backup
‚Ä¢ T·∫°o b·∫£n sao ƒë·ªÉ ƒë·ªÅ ph√≤ng m·∫•t file"""

            show_message(self, "Sao l∆∞u th√†nh c√¥ng", message, "success")
            self.log(f"Backed up GUID: {current_guid}")
            
        except Exception as e:
            self.log(f"Error backing up GUID: {str(e)}")
            show_message(self, "L·ªói", str(e), "error")

    def change_machine_guid(self):
        try:
            # T·∫°o GUID m·ªõi
            new_guid = str(uuid.uuid4())
            
            # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
            if messagebox.askyesno("X√°c nh·∫≠n", 
                                 f"B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·ªïi MachineGuid th√†nh:\n{new_guid}"):
                self.set_machine_guid(new_guid)
                self.update_current_guid()
                self.log(f"Changed GUID to: {new_guid}")
                show_message(self, "Th√†nh c√¥ng", 
                           f"ƒê√£ thay ƒë·ªïi MachineGuid th√†nh:\n{new_guid}", "success")
        
        except Exception as e:
            self.log(f"Error changing GUID: {str(e)}")
            show_message(self, "L·ªói", str(e), "error")

    def restore_machine_guid(self):
        try:
            # L·∫•y ƒë∆∞·ªùng d·∫´n t·ª´ settings
            settings_manager = self.winfo_toplevel().settings_manager
            backup_path = settings_manager.get_setting("guid_backup_path")
            
            if not backup_path:
                backup_path = os.path.join(os.path.expanduser("~"), "machine_guid_backup.json")
            else:
                backup_path = os.path.join(backup_path, "machine_guid_backup.json")
            
            if not os.path.exists(backup_path):
                raise Exception("Kh√¥ng t√¨m th·∫•y file backup!")
            
            with open(backup_path, 'r') as f:
                backup_data = json.load(f)
            
            old_guid = backup_data["guid"]
            
            # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
            if messagebox.askyesno("X√°c nh·∫≠n", 
                                 f"Ph·ª•c h·ªìi MachineGuid v·ªÅ:\n{old_guid}"):
                self.set_machine_guid(old_guid)
                self.update_current_guid()
                self.log(f"Restored GUID to: {old_guid}")
                show_message(self, "Th√†nh c√¥ng", 
                           f"ƒê√£ ph·ª•c h·ªìi MachineGuid v·ªÅ:\n{old_guid}", "success")
        
        except Exception as e:
            self.log(f"Error restoring GUID: {str(e)}")
            show_message(self, "L·ªói", str(e), "error")

    def check_block_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i ch·∫∑n update"""
        try:
            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            if not os.path.exists(hosts_path):
                self.block_status_label.config(text="‚ùå Kh√¥ng t√¨m th·∫•y file hosts", foreground="#CC0000")  # M√†u ƒë·ªè
                return False

            with open(hosts_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if "# block cursor auto update\n127.0.0.1 download.todesktop.com" in content:
                self.block_status_label.config(text="‚úÖ ƒê√£ ch·∫∑n Update", foreground="#00CC00")  # M√†u xanh l√°
                self.log("Tr·∫°ng th√°i: ƒê√£ ch·∫∑n Cursor Update")
                return True
            else:
                self.block_status_label.config(text="‚ùå Ch∆∞a ch·∫∑n Update", foreground="#CC0000")  # M√†u ƒë·ªè
                self.log("Tr·∫°ng th√°i: Ch∆∞a ch·∫∑n Cursor Update")
                return False
                
        except Exception as e:
            self.block_status_label.config(text="‚ùå L·ªói ki·ªÉm tra", foreground="#CC0000")  # M√†u ƒë·ªè
            self.log(f"L·ªói ki·ªÉm tra tr·∫°ng th√°i block: {str(e)}")
            return False

    def block_cursor_update(self):
        """Th√™m rules ch·∫∑n update v√†o file hosts"""
        try:
            if self.check_block_status():
                show_message(self, "Th√¥ng b√°o", "ƒê√£ ch·∫∑n Update t·ª´ tr∆∞·ªõc!", "info")
                return

            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            
            # ƒê·ªçc n·ªôi dung hi·ªán t·∫°i
            with open(hosts_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Th√™m rules ch·∫∑n
            block_rules = "\n\n# block cursor auto update\n127.0.0.1 download.todesktop.com"
            
            # Ghi n·ªôi dung m·ªõi
            with open(hosts_path, 'w', encoding='utf-8') as f:
                f.write(content + block_rules)
            
            self.check_block_status()
            show_message(self, "Th√†nh c√¥ng", "ƒê√£ ch·∫∑n Cursor Update!", "success")
            self.log("ƒê√£ th√™m rules ch·∫∑n Cursor Update")
            
        except Exception as e:
            error_msg = f"L·ªói khi ch·∫∑n Update: {str(e)}"
            show_message(self, "L·ªói", error_msg, "error")
            self.log(error_msg)

    def unblock_cursor_update(self):
        """X√≥a rules ch·∫∑n update kh·ªèi file hosts"""
        try:
            if not self.check_block_status():
                show_message(self, "Th√¥ng b√°o", "Ch∆∞a b·∫≠t ch·∫∑n Update!", "info")
                return

            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            
            # ƒê·ªçc n·ªôi dung hi·ªán t·∫°i
            with open(hosts_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # X√≥a rules ch·∫∑n
            content = content.replace("\n# block cursor auto update\n127.0.0.1 download.todesktop.com", "")
            
            # Ghi n·ªôi dung m·ªõi
            with open(hosts_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.check_block_status()
            show_message(self, "Th√†nh c√¥ng", "ƒê√£ g·ª° ch·∫∑n Cursor Update!", "success")
            self.log("ƒê√£ x√≥a rules ch·∫∑n Cursor Update")
            
        except Exception as e:
            error_msg = f"L·ªói khi g·ª° ch·∫∑n Update: {str(e)}"
            show_message(self, "L·ªói", error_msg, "error")
            self.log(error_msg)

    def log(self, message):
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END) 